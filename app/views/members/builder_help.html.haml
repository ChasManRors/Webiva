:css
  ul {
    list-style: none;
    font-size: 11px;
  }
  ul ul {
    padding-left: 20px;
  }
  ul li.fields {
    padding-bottom: 10px;
  }
  
  ul ul li {
    padding-bottom: 3px;
  }
  span.heading {
    font-size: 13px;
    font-weight: bold;
  }
- types = {}
- seen_fields = {}
.cms_form{:style => "width:720px; padding:5px;"}
  %h4 Instructions
  %p
    A filter is a set of operations used to create a list of users. An operation is a field and its method.
    %br/
    Ex:
    = succeed "." do
      %b created
    = succeed "(7," do
      %u since
    "days") - Will return all the user who where created in the last 7 days.
    %br/
    %br/
  #builder_fields{:style => "width:400px; padding-right:20px; float:left;"}
    %h2{:style => "border-bottom: 1px solid #000; width: 300px;"} Fields
    %ul
      - @handlers.each do |info|
        %li.fields
          %span.heading= info[:name]
          %ul
            - info[:class].user_segment_fields.keys.collect { |key| key.to_s }.sort.each do |key|
              - field_name = key
              - field = info[:class].user_segment_fields[key.to_sym]
              - type_name = field[:type].to_s.underscore.split("/")[-1].sub(/_type$/,'').humanize
              %li
                = '* ' if seen_fields[key]
                = field[:name].sub(/^.*?: /, '')
                \:
                %b= key
                \-
                %em= type_name
              - seen_fields[key] = 1
              - types[type_name] = field[:type]
    %p{:style => "padding-left:10px;"}
      * available through
      %b AND
      condition only
  #builder_types{:style => "width:300px; float:right;"}
    %h2{:style => "border-bottom: 1px solid #000; width: 300px;"} Types
    %ul
      - types.sort.each do |type_name, type_class|
        %li
          %b= type_name
          %ul
            - type_class.user_segment_field_type_operations.keys.collect { |key| key.to_s }.sort.each do |key|
              - operation = type_class.user_segment_field_type_operations[key.to_sym]
              %li
                = '* ' if operation[:complex]
                = succeed "(" do
                  %u= key
                = operation[:argument_names].join(', ')
                ) #{h(' - ' + operation[:description]) if operation[:description]}
                %ul
                  - operation[:arguments].each_with_index do |arg,idx|
                    %li
                      = operation[:argument_names][idx]
                      \-
                      %em= arg
                      - if arg == :option
                        %ul
                          %li
                            = operation[:argument_options][idx][:options].collect { |opt| opt = opt[0] if opt.is_a?(Array); opt }.join(', ') if arg == :option
    %p
      * complex functions can not be
      %b COMBINED
  %br{:style => "clear:both;"}/
